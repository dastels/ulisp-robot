
(defun test-read-range (channel)
  (pca9548-select channel)
  (let ((range (vl6180-read-range))
        (status (vl6180-read-range-status)))
    (cond ((= status VL6180X_ERROR_NONE)
           (format t "~%Channel ~a Range: ~a" channel range))
          ((and (>= status VL6180X_ERROR_SYSERR_1) (<= status VL6180X_ERROR_SYSERR_5))
           (format t "~%Channel ~a System error" channel))
          ((= status VL6180X_ERROR_ECEFAIL)
           (format t "~%Channel ~a ECE failure" channel))
          ((= status VL6180X_ERROR_NOCONVERGE)
           (format t "~%Channel ~a No convergence" channel))
          ((= status VL6180X_ERROR_RANGEIGNORE)
           (format t "~%Channel ~a Ignoring range" channel))
          ((= status VL6180X_ERROR_SNR)
           (format t "~%Channel ~a Signal/Noise error" channel))
          ((= status VL6180X_ERROR_RAWUFLOW)
           (format t "~%Channel ~a Raw reading underflow" channel))
          ((= status VL6180X_ERROR_RAWOFLOW)
           (format t "~%Channel ~a Raw reading overflow" channel))
          ((= status VL6180X_ERROR_RANGEUFLOW)
           (format t "~%Channel ~a Range reading underflow" channel))
          ((= status VL6180X_ERROR_RANGEOFLOW)
           (format t "~%Channel ~a Range reading overflow" channel)))))


(defun range-test ()
  (dotimes (i 8)
    (pca9548-select i)
    (vl6180-init))
  (let ((channel 0))
    (loop
      (when (= channel 8)
        (setq channel 0))
      (test-read-range channel)
      (setq channel (1+ channel))
      (delay 100))))
